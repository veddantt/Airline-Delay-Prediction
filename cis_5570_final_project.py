# -*- coding: utf-8 -*-
"""CIS 5570 - Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkpihl16PJLf7W_p0jpxZvIxW0IoMvFP
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

!pip install pyspark

from pyspark import SparkContext, SparkConf
from pyspark.sql import SparkSession
import numpy as np

conf = SparkConf().setAppName('matrix')
sc = SparkContext.getOrCreate(conf = conf)
sqlContext = SparkSession.builder\
.master("local")\
.appName("Colab")\
.config('spark,ui,port', '4050')\
.getOrCreate()

!wget -q 'https://drive.google.com/uc?export=download&id=16h5tXxW3JuJNUqJyGiykqispjP_CGNpa' -O 'Airlines.csv'

spark = SparkSession.builder.appName("Airlines Delay").getOrCreate()
spark.sparkContext.setLogLevel("WARN")

#Table

csv_file_path = "Airlines.csv"
table = spark.read.csv(csv_file_path, header=True, inferSchema=True)
table.show()

#Heatmap

heatMap = table.toPandas()
plt.figure(figsize=(10, 6))
sns.heatmap(heatMap.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

#Histograph

plt.figure(figsize=(10, 6))
sns.histplot(data=heatMap, x='Flight', hue='Delay', kde=True, bins=30)
plt.title("Flight Delay Histograph")
plt.xlabel("Flight")
plt.ylabel("Count")
plt.show()

#Data Processing

X_cat = table.select(['Airline', 'AirportFrom', 'AirportTo', 'DayOfWeek'])
X_num = table.drop('Airline').drop('AirportFrom').drop('AirportTo').drop('DayOfWeek').drop('Delay')
X_cat = pd.get_dummies(X_cat.toPandas(), drop_first=True)
X_cat.head()

#Delay Histograph

heatMap = table.toPandas()
plt.figure(figsize=(10, 6))
sns.countplot(data=heatMap, x='Airline', hue='Delay')
plt.show()

#Random Forest Classifier

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

heatMap = table.toPandas()
y = heatMap['Delay']
X = pd.get_dummies(heatMap.drop('Delay', axis=1), drop_first=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
df_encoded = pd.get_dummies(heatMap, drop_first=True)
print('RandomForestClassifier')
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))

#Decissiontree Classifier

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report

clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))

#Perception

from numpy import mean
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.linear_model import Perceptron

X, y = make_classification(n_samples=1000, n_features=10, n_informative=10, n_redundant=0, random_state=1)
model = Perceptron()
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))